namespace BlackJackCamera.Services
{
    /// <summary>
    /// Маппинг классов модели YOLOv8 на категории банковских услуг с бейджами
    /// </summary>
    public static class CategoryBadgeMapper
    {
        /// <summary>
        /// Определение категорий с их бейджами
        /// </summary>
        private static readonly Dictionary<string, List<string>> _categoryBadges = new()
        {
            ["Купюры"] = new List<string>
            {
                "Заказ наличных", "Обмен валюты", "Платежи",
                "Совместные финансы", "Сейфы", "Электронные деньги",
                "Кредит наличными", "Кэшбэк от партнеров", "Сбережения",
                "Банкоматы и отделения"
            },

            ["Автомобиль"] = new List<string>
            {
                "Автокредит", "ОСАГО", "КАСКО", "Оплата штрафов ГАИ",
                "Мои авто", "Оплата транспорта", "FIT SERVICE 5%",
                "Планета АВТО 10%"
            },

            ["Дом"] = new List<string>
            {
                "Счета ЖКУ", "Страхование недвижемости",
                "Оплата интернета, телефонии, ТВ", "Изменить адрес регистрации",
                "Кредит под залог недвижемости", "Ипотека",
                "Домовой 10%", "Ужин дома до 25%"
            },

            ["Здание"] = new List<string>
            {
                "Кредиты бизнесу на покупку/строительство недвижимости",
                "Лизинг нежилых помещений", "Банковские гарантии под строительство",
                "Инвестиции в девелоперские проекты"
            },

            ["Ноутбук"] = new List<string>
            {
                "Haier до 10%", "Альфа-Маркет до 10%",
                "Рассрочка", "Кредит"
            },

            ["Смартфон"] = new List<string>
            {
                "Мобильный банк", "Перевод по номеру телефона",
                "Подключить NFC-оплату", "Кредит на смартфон",
                "Haier до 10%", "Альфа-Маркет до 10%",
                "Связаться с поддержкой"
            },

            ["БытоваяТехника"] = new List<string>
            {
                "Потребительский кредит на технику",
                "Рассрочка при покупке в магазинах-партнёрах",
                "Кэшбэк за покупки техники", "Страхование бытовой техники"
            },

            ["Магазин"] = new List<string>
            {
                "Расходы и доходы", "Эквайринг (терминалы, QR-оплаты)",
                "Интернет-эквайринг (оплата на сайте, подписки)",
                "Кредиты бизнесу на открытие торговых точек",
                "Инкассация и обслуживание касс",
                "POS-кредиты (покупка товаров в кредит на месте)"
            },

            ["Документы"] = new List<string>
            {
                "Счета ЖКУ", "Мои договоры", "Подписанные документы",
                "Счета к оплате", "Подписка Альфа-Смарт", "Мои данные",
                "Чеки за покупки", "Услуги по выпуску и ведению ценных бумаг"
            },

            ["Ручка"] = new List<string>
            {
                "Корпоративные сувениры", "Подписанные документы",
                "Электронная подпись"
            },

            ["Тетрадь"] = new List<string>
            {
                "Финансовое планирование",
                "Бухгалтерские сервисы для бизнеса",
                "Планировщики в мобильном приложении банка",
                "Отчёты по операциям", "Чеки за покупки"
            },

            ["Человек"] = new List<string>
            {
                "Стать зарплатным клиентом", "Заказ дебетовой карты",
                "Кредиты и депозиты для физлиц", "Страхование жизни и здоровья",
                "Пенсионные программы", "Вход по биометрии", "Перевод",
                "Подарок на Альфа-Маркете до 15%"
            }
        };

        /// <summary>
        /// Маппинг классов модели на категории
        /// </summary>
        private static readonly Dictionary<int, string> _classToCategory = new()
        {
            // Купюры (наличные деньги, монеты)
            [124] = "Купюры", // Монета

            // Автомобиль
            [90] = "Автомобиль", // Машина
            [302] = "Автомобиль", // Наземное транспортное средство
            [567] = "Автомобиль", // Транспортное средство

            // Дом / квартира
            [257] = "Дом", // Дом

            // Здание
            [70] = "Здание", // Здание
            [354] = "Здание", // Офисное здание

            // Ноутбук / ПК
            [304] = "Ноутбук", // Ноутбук
            [128] = "Ноутбук", // Компьютерный монитор
            [127] = "Ноутбук", // Компьютерная клавиатура
            [129] = "Ноутбук", // Компьютерная мышь

            // Смартфон
            [339] = "Смартфон", // Мобильный телефон
            [526] = "Смартфон", // Телефон

            // Бытовая техника
            [252] = "БытоваяТехника", // Бытовая техника
            [419] = "БытоваяТехника", // Холодильник
            [575] = "БытоваяТехника", // Стиральная машина

            // Магазин
            [131] = "Магазин", // Магазин

            // Документы
            [54] = "Документы", // Книга

            // Ручка
            [376] = "Ручка", // Ручка

            // Тетрадь / Блокнот
            [377] = "Тетрадь", // Пенал

            // Человек
            [381] = "Человек", // Человек
            [322] = "Человек", // Мужчина
            [594] = "Человек", // Женщина
            [63] = "Человек", // Мальчик
            [216] = "Человек" // Девочка
        };

        /// <summary>
        /// Получает список бейджей для распознанных объектов
        /// </summary>
        /// <param name="detections">Список распознанных объектов</param>
        /// <returns>Список уникальных бейджей или null если нет подходящих категорий</returns>
        public static List<string>? GetBadgesForDetections(List<Detection> detections)
        {
            if (detections == null || detections.Count == 0)
                return null;

            // Собираем все категории из распознанных объектов
            var categories = new HashSet<string>();

            foreach (var detection in detections)
            {
                if (_classToCategory.TryGetValue(detection.ClassId, out var category))
                {
                    categories.Add(category);
                }
            }

            // Если нет категорий, возвращаем null
            if (categories.Count == 0)
                return null;

            // Собираем все бейджи из найденных категорий
            var badges = new HashSet<string>();

            foreach (var category in categories)
            {
                if (_categoryBadges.TryGetValue(category, out var categoryBadges))
                {
                    foreach (var badge in categoryBadges)
                    {
                        badges.Add(badge);
                    }
                }
            }

            return badges.Count > 0 ? badges.ToList() : null;
        }

        /// <summary>
        /// Проверяет, есть ли бейджи для данного класса
        /// </summary>
        /// <param name="classId">ID класса объекта</param>
        /// <returns>true если есть бейджи для данного класса</returns>
        public static bool HasBadgesForClass(int classId)
        {
            return _classToCategory.ContainsKey(classId);
        }
    }
}