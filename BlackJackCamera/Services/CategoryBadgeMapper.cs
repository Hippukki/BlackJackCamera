namespace BlackJackCamera.Services
{
    /// <summary>
    /// Маппинг классов модели YOLOv8 на категории банковских услуг с бейджами
    /// </summary>
    public static class CategoryBadgeMapper
    {
        /// <summary>
        /// Словарь маппинга ClassId -> список бейджей
        /// </summary>
        private static readonly Dictionary<int, List<string>> _categoryBadges = new()
        {
            // Купюры (наличные деньги, монеты) - класс 125 "Монета"
            [125] = new List<string>
            {
                "Заказ наличных", "Обмен валюты", "Платежи",
                "Совместные финансы", "Сейфы", "Электронные деньги",
                "Кредит наличными", "Кэшбэк от партнеров", "Сбережения",
                "Банкоматы и отделения"
            },

            // Автомобиль - классы 91 "Машина", 303 "Наземное транспортное средство", 568 "Транспортное средство"
            [91] = new List<string>
            {
                "Автокредит", "ОСАГО", "КАСКО", "Оплата штрафов ГАИ",
                "Мои авто", "Оплата транспорта", "FIT SERVICE 5%",
                "Планета АВТО 10%"
            },
            [303] = new List<string>
            {
                "Автокредит", "ОСАГО", "КАСКО", "Оплата штрафов ГАИ",
                "Мои авто", "Оплата транспорта", "FIT SERVICE 5%",
                "Планета АВТО 10%"
            },
            [568] = new List<string>
            {
                "Автокредит", "ОСАГО", "КАСКО", "Оплата штрафов ГАИ",
                "Мои авто", "Оплата транспорта", "FIT SERVICE 5%",
                "Планета АВТО 10%"
            },

            // Дом / квартира - класс 258 "Дом"
            [258] = new List<string>
            {
                "Счета ЖКУ", "Страхование недвижемости",
                "Оплата интернета, телефонии, ТВ", "Изменить адрес регистрации",
                "Кредит под залог недвижемости", "Ипотека",
                "Домовой 10%", "Ужин дома до 25%"
            },

            // Здание - классы 71 "Здание", 355 "Офисное здание"
            [71] = new List<string>
            {
                "Кредиты бизнесу на покупку/строительство недвижимости",
                "Лизинг нежилых помещений", "Банковские гарантии под строительство",
                "Инвестиции в девелоперские проекты"
            },
            [355] = new List<string>
            {
                "Кредиты бизнесу на покупку/строительство недвижимости",
                "Лизинг нежилых помещений", "Банковские гарантии под строительство",
                "Инвестиции в девелоперские проекты"
            },

            // Ноутбук / ПК - классы 305 "Ноутбук", 129 "Компьютерный монитор", 128 "Компьютерная клавиатура", 130 "Компьютерная мышь"
            [305] = new List<string>
            {
                "Haier до 10%", "Альфа-Маркет до 10%",
                "Рассрочка", "Кредит"
            },
            [129] = new List<string>
            {
                "Haier до 10%", "Альфа-Маркет до 10%",
                "Рассрочка", "Кредит"
            },
            [128] = new List<string>
            {
                "Haier до 10%", "Альфа-Маркет до 10%",
                "Рассрочка", "Кредит"
            },
            [130] = new List<string>
            {
                "Haier до 10%", "Альфа-Маркет до 10%",
                "Рассрочка", "Кредит"
            },

            // Смартфон - классы 340 "Мобильный телефон", 527 "Телефон"
            [340] = new List<string>
            {
                "Мобильный банк", "Перевод по номеру телефона",
                "Подключить NFC-оплату", "Кредит на смартфон",
                "Haier до 10%", "Альфа-Маркет до 10%",
                "Связаться с поддержкой"
            },
            [527] = new List<string>
            {
                "Мобильный банк", "Перевод по номеру телефона",
                "Подключить NFC-оплату", "Кредит на смартфон",
                "Haier до 10%", "Альфа-Маркет до 10%",
                "Связаться с поддержкой"
            },

            // Бытовая техника - классы 253 "Бытовая техника", 420 "Холодильник", 576 "Стиральная машина"
            [253] = new List<string>
            {
                "Потребительский кредит на технику",
                "Рассрочка при покупке в магазинах-партнёрах",
                "Кэшбэк за покупки техники", "Страхование бытовой техники"
            },
            [420] = new List<string>
            {
                "Потребительский кредит на технику",
                "Рассрочка при покупке в магазинах-партнёрах",
                "Кэшбэк за покупки техники", "Страхование бытовой техники"
            },
            [576] = new List<string>
            {
                "Потребительский кредит на технику",
                "Рассрочка при покупке в магазинах-партнёрах",
                "Кэшбэк за покупки техники", "Страхование бытовой техники"
            },

            // Магазин - класс 132 "Магазин"
            [132] = new List<string>
            {
                "Расходы и доходы", "Эквайринг (терминалы, QR-оплаты)",
                "Интернет-эквайринг (оплата на сайте, подписки)",
                "Кредиты бизнесу на открытие торговых точек",
                "Инкассация и обслуживание касс",
                "POS-кредиты (покупка товаров в кредит на месте)"
            },

            // Документы - класс 55 "Книга"
            [55] = new List<string>
            {
                "Счета ЖКУ", "Мои договоры", "Подписанные документы",
                "Счета к оплате", "Подписка Альфа-Смарт", "Мои данные",
                "Чеки за покупки", "Услуги по выпуску и ведению ценных бумаг"
            },

            // Ручка - класс 377 "Ручка"
            [377] = new List<string>
            {
                "Корпоративные сувениры", "Подписанные документы",
                "Электронная подпись"
            },

            // Тетрадь / Блокнот - класс 378 "Пенал" (связанный)
            [378] = new List<string>
            {
                "Финансовое планирование",
                "Бухгалтерские сервисы для бизнеса",
                "Планировщики в мобильном приложении банка",
                "Отчёты по операциям", "Чеки за покупки"
            },

            // Человек - классы 382 "Человек", 323 "Мужчина", 595 "Женщина", 64 "Мальчик", 217 "Девочка"
            [382] = new List<string>
            {
                "Стать зарплатным клиентом", "Заказ дебетовой карты",
                "Кредиты и депозиты для физлиц", "Страхование жизни и здоровья",
                "Пенсионные программы", "Вход по биометрии", "Перевод",
                "Подарок на Альфа-Маркете до 15%"
            },
            [323] = new List<string>
            {
                "Стать зарплатным клиентом", "Заказ дебетовой карты",
                "Кредиты и депозиты для физлиц", "Страхование жизни и здоровья",
                "Пенсионные программы", "Вход по биометрии", "Перевод",
                "Подарок на Альфа-Маркете до 15%"
            },
            [595] = new List<string>
            {
                "Стать зарплатным клиентом", "Заказ дебетовой карты",
                "Кредиты и депозиты для физлиц", "Страхование жизни и здоровья",
                "Пенсионные программы", "Вход по биометрии", "Перевод",
                "Подарок на Альфа-Маркете до 15%"
            },
            [64] = new List<string>
            {
                "Стать зарплатным клиентом", "Заказ дебетовой карты",
                "Кредиты и депозиты для физлиц", "Страхование жизни и здоровья",
                "Пенсионные программы", "Вход по биометрии", "Перевод",
                "Подарок на Альфа-Маркете до 15%"
            },
            [217] = new List<string>
            {
                "Стать зарплатным клиентом", "Заказ дебетовой карты",
                "Кредиты и депозиты для физлиц", "Страхование жизни и здоровья",
                "Пенсионные программы", "Вход по биометрии", "Перевод",
                "Подарок на Альфа-Маркете до 15%"
            }
        };

        /// <summary>
        /// Получает список бейджей для распознанных объектов
        /// </summary>
        /// <param name="detections">Список распознанных объектов</param>
        /// <returns>Список уникальных бейджей или null если нет подходящих категорий</returns>
        public static List<string>? GetBadgesForDetections(List<Detection> detections)
        {
            if (detections == null || detections.Count == 0)
                return null;

            var badges = new HashSet<string>();

            foreach (var detection in detections)
            {
                if (_categoryBadges.TryGetValue(detection.ClassId, out var categoryBadges))
                {
                    foreach (var badge in categoryBadges)
                    {
                        badges.Add(badge);
                    }
                }
            }

            return badges.Count > 0 ? badges.ToList() : null;
        }

        /// <summary>
        /// Проверяет, есть ли бейджи для данного класса
        /// </summary>
        /// <param name="classId">ID класса объекта</param>
        /// <returns>true если есть бейджи для данного класса</returns>
        public static bool HasBadgesForClass(int classId)
        {
            return _categoryBadges.ContainsKey(classId);
        }
    }
}